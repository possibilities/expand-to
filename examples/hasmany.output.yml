openapi: 3.0.0
info:
  version: 0.0.0
  title: 'Example: hasMany'
paths:
  /pets:
    get:
      operationId: listPets
      tags:
        - Pets
      summary: List pets
      parameters:
        - name: perPage
          description: Per page
          schema:
            type: integer
            format: int32
            default: 20
          in: query
          required: false
        - name: page
          description: Page number
          schema:
            type: integer
            format: int32
            default: 1
          in: query
          required: false
        - name: orderBy
          description: Order by
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: List succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/PetResponse'
                  pages:
                    $ref: '#/components/schemas/PaginationResponse'
              examples:
                pet1:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    pets:
                      - name: dolore
                      - name: aperiam
                      - name: perspiciatis
                      - name: dolores
                      - name: distinctio
                      - name: nihil
                      - name: modi
                      - name: voluptatem
                      - name: voluptatibus
                      - name: accusamus
                      - name: ullam
                      - name: velit
                      - name: sequi
                      - name: consectetur
                      - name: rerum
                      - name: veniam
                      - name: odit
                      - name: dolor
                      - name: quasi
                      - name: ut
                pet2:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    pets:
                      - name: cum
                      - name: repellendus
                      - name: omnis
                      - name: ipsam
                      - name: rerum
                      - name: sit
                      - name: voluptatibus
                      - name: veritatis
                      - name: fugit
                      - name: a
                      - name: distinctio
                      - name: quis
                      - name: autem
                      - name: veniam
                      - name: unde
                      - name: illo
                      - name: ut
                      - name: dolores
                      - name: debitis
                      - name: facilis
                pet3:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    pets:
                      - name: ut
                      - name: aut
                      - name: maiores
                      - name: sed
                      - name: ipsa
                      - name: voluptas
                      - name: temporibus
                      - name: velit
                      - name: est
                      - name: ab
                      - name: ipsa
                      - name: aut
                      - name: ut
                      - name: voluptas
                      - name: minus
                      - name: sit
                      - name: aperiam
                      - name: ea
                      - name: ipsum
                      - name: quis
                pet4:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    pets:
                      - name: totam
                      - name: facere
                      - name: atque
                      - name: recusandae
                      - name: accusantium
                      - name: rerum
                      - name: voluptas
                      - name: eos
                      - name: consequatur
                      - name: sed
                      - name: ut
                      - name: quasi
                      - name: labore
                      - name: sequi
                      - name: dolores
                      - name: voluptas
                      - name: consequuntur
                      - name: velit
                      - name: facilis
                      - name: ratione
                pet5:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    pets:
                      - name: et
                      - name: numquam
                      - name: sapiente
                      - name: laudantium
                      - name: aut
                      - name: necessitatibus
                      - name: consequatur
                      - name: sit
                      - name: qui
                      - name: consequatur
                      - name: dolorum
                      - name: voluptates
                      - name: vitae
                      - name: quasi
                      - name: est
                      - name: nulla
                      - name: quia
                      - name: itaque
                      - name: sint
                      - name: voluptate
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createPet
      tags:
        - Pets
      summary: Create pet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
            examples:
              pet1:
                value:
                  name: quas
              pet2:
                value:
                  name: quam
              pet3:
                value:
                  name: assumenda
              pet4:
                value:
                  name: nulla
              pet5:
                value:
                  name: et
      responses:
        '201':
          description: Create succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    $ref: '#/components/schemas/PetResponse'
              examples:
                pet1:
                  value:
                    pet:
                      name: suscipit
                pet2:
                  value:
                    pet:
                      name: aliquid
                pet3:
                  value:
                    pet:
                      name: qui
                pet4:
                  value:
                    pet:
                      name: provident
                pet5:
                  value:
                    pet:
                      name: exercitationem
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/pets/{petId}':
    head:
      operationId: checkPet
      tags:
        - Pets
      summary: Check pet
      parameters:
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      responses:
        '200':
          description: Check succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      operationId: getPet
      tags:
        - Pets
      summary: Get pet
      parameters:
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      responses:
        '200':
          description: Get succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    $ref: '#/components/schemas/PetResponse'
              examples:
                pet1:
                  value:
                    pet:
                      name: omnis
                pet2:
                  value:
                    pet:
                      name: ut
                pet3:
                  value:
                    pet:
                      name: commodi
                pet4:
                  value:
                    pet:
                      name: velit
                pet5:
                  value:
                    pet:
                      name: nam
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: replacePet
      tags:
        - Pets
      summary: Replace pet
      parameters:
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
            examples:
              pet1:
                value:
                  name: nostrum
              pet2:
                value:
                  name: voluptatem
              pet3:
                value:
                  name: corporis
              pet4:
                value:
                  name: fuga
              pet5:
                value:
                  name: minima
      responses:
        '200':
          description: Replace succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    $ref: '#/components/schemas/PetResponse'
              examples:
                pet1:
                  value:
                    pet:
                      name: assumenda
                pet2:
                  value:
                    pet:
                      name: earum
                pet3:
                  value:
                    pet:
                      name: non
                pet4:
                  value:
                    pet:
                      name: occaecati
                pet5:
                  value:
                    pet:
                      name: accusamus
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updatePet
      tags:
        - Pets
      summary: Update pet
      parameters:
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
            examples:
              pet1:
                value:
                  name: veniam
              pet2:
                value:
                  name: commodi
              pet3:
                value:
                  name: non
              pet4:
                value:
                  name: ea
              pet5:
                value:
                  name: debitis
      responses:
        '200':
          description: Update succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    $ref: '#/components/schemas/PetResponse'
              examples:
                pet1:
                  value:
                    pet:
                      name: autem
                pet2:
                  value:
                    pet:
                      name: perspiciatis
                pet3:
                  value:
                    pet:
                      name: maiores
                pet4:
                  value:
                    pet:
                      name: reprehenderit
                pet5:
                  value:
                    pet:
                      name: excepturi
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deletePet
      tags:
        - Pets
      summary: Delete pet
      parameters:
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      responses:
        '204':
          description: Delete succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /people:
    get:
      operationId: listPeople
      tags:
        - People
      summary: List people
      parameters:
        - name: perPage
          description: Per page
          schema:
            type: integer
            format: int32
            default: 20
          in: query
          required: false
        - name: page
          description: Page number
          schema:
            type: integer
            format: int32
            default: 1
          in: query
          required: false
        - name: orderBy
          description: Order by
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: List succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  people:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonResponse'
                  pages:
                    $ref: '#/components/schemas/PaginationResponse'
              examples:
                person1:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    people:
                      - name: repellat
                      - name: sint
                      - name: libero
                      - name: beatae
                      - name: vitae
                      - name: vitae
                      - name: et
                      - name: sunt
                      - name: voluptas
                      - name: quidem
                      - name: quidem
                      - name: beatae
                      - name: harum
                      - name: accusamus
                      - name: est
                      - name: nihil
                      - name: voluptatem
                      - name: officia
                      - name: sunt
                      - name: eaque
                person2:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    people:
                      - name: aut
                      - name: quas
                      - name: ducimus
                      - name: incidunt
                      - name: ut
                      - name: voluptas
                      - name: beatae
                      - name: qui
                      - name: veniam
                      - name: facilis
                      - name: velit
                      - name: atque
                      - name: illum
                      - name: id
                      - name: et
                      - name: eius
                      - name: quia
                      - name: asperiores
                      - name: nihil
                      - name: pariatur
                person3:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    people:
                      - name: reprehenderit
                      - name: suscipit
                      - name: aperiam
                      - name: aut
                      - name: minima
                      - name: autem
                      - name: ut
                      - name: quis
                      - name: minus
                      - name: quam
                      - name: debitis
                      - name: quae
                      - name: veritatis
                      - name: eligendi
                      - name: et
                      - name: tempora
                      - name: et
                      - name: tempora
                      - name: et
                      - name: ea
                person4:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    people:
                      - name: qui
                      - name: omnis
                      - name: qui
                      - name: qui
                      - name: ipsa
                      - name: nobis
                      - name: quam
                      - name: et
                      - name: laboriosam
                      - name: eaque
                      - name: quia
                      - name: nihil
                      - name: excepturi
                      - name: voluptatem
                      - name: veniam
                      - name: sunt
                      - name: et
                      - name: quaerat
                      - name: animi
                      - name: aut
                person5:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    people:
                      - name: adipisci
                      - name: assumenda
                      - name: dolore
                      - name: nam
                      - name: saepe
                      - name: fugit
                      - name: perspiciatis
                      - name: consequatur
                      - name: rerum
                      - name: aliquid
                      - name: et
                      - name: beatae
                      - name: ut
                      - name: similique
                      - name: harum
                      - name: voluptatem
                      - name: laboriosam
                      - name: ut
                      - name: officia
                      - name: excepturi
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createPerson
      tags:
        - People
      summary: Create person
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
            examples:
              person1:
                value:
                  name: voluptas
              person2:
                value:
                  name: voluptatem
              person3:
                value:
                  name: aspernatur
              person4:
                value:
                  name: architecto
              person5:
                value:
                  name: porro
      responses:
        '201':
          description: Create succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  person:
                    $ref: '#/components/schemas/PersonResponse'
              examples:
                person1:
                  value:
                    person:
                      name: cum
                person2:
                  value:
                    person:
                      name: similique
                person3:
                  value:
                    person:
                      name: in
                person4:
                  value:
                    person:
                      name: sit
                person5:
                  value:
                    person:
                      name: autem
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/people/{personId}':
    head:
      operationId: checkPerson
      tags:
        - People
      summary: Check person
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
      responses:
        '200':
          description: Check succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      operationId: getPerson
      tags:
        - People
      summary: Get person
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
      responses:
        '200':
          description: Get succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  person:
                    $ref: '#/components/schemas/PersonResponse'
              examples:
                person1:
                  value:
                    person:
                      name: fugit
                person2:
                  value:
                    person:
                      name: unde
                person3:
                  value:
                    person:
                      name: commodi
                person4:
                  value:
                    person:
                      name: qui
                person5:
                  value:
                    person:
                      name: qui
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: replacePerson
      tags:
        - People
      summary: Replace person
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
            examples:
              person1:
                value:
                  name: explicabo
              person2:
                value:
                  name: fugit
              person3:
                value:
                  name: est
              person4:
                value:
                  name: quidem
              person5:
                value:
                  name: ea
      responses:
        '200':
          description: Replace succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  person:
                    $ref: '#/components/schemas/PersonResponse'
              examples:
                person1:
                  value:
                    person:
                      name: ut
                person2:
                  value:
                    person:
                      name: nisi
                person3:
                  value:
                    person:
                      name: iusto
                person4:
                  value:
                    person:
                      name: est
                person5:
                  value:
                    person:
                      name: doloribus
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updatePerson
      tags:
        - People
      summary: Update person
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
            examples:
              person1:
                value:
                  name: numquam
              person2:
                value:
                  name: consequuntur
              person3:
                value:
                  name: facilis
              person4:
                value:
                  name: illo
              person5:
                value:
                  name: voluptates
      responses:
        '200':
          description: Update succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  person:
                    $ref: '#/components/schemas/PersonResponse'
              examples:
                person1:
                  value:
                    person:
                      name: voluptas
                person2:
                  value:
                    person:
                      name: id
                person3:
                  value:
                    person:
                      name: et
                person4:
                  value:
                    person:
                      name: ab
                person5:
                  value:
                    person:
                      name: aut
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deletePerson
      tags:
        - People
      summary: Delete person
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
      responses:
        '204':
          description: Delete succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/people/{personId}/pets':
    get:
      operationId: listPersonPets
      tags:
        - People
      summary: List person pets
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
        - name: perPage
          description: Per page
          schema:
            type: integer
            format: int32
            default: 20
          in: query
          required: false
        - name: page
          description: Page number
          schema:
            type: integer
            format: int32
            default: 1
          in: query
          required: false
        - name: orderBy
          description: Order by
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: List succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  personPets:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonPetResponse'
                  pages:
                    $ref: '#/components/schemas/PaginationResponse'
              examples:
                personPet1:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    personPets:
                      - petId: saepe
                      - petId: atque
                      - petId: corrupti
                      - petId: aut
                      - petId: id
                      - petId: dolor
                      - petId: ipsum
                      - petId: tenetur
                      - petId: saepe
                      - petId: occaecati
                      - petId: rem
                      - petId: et
                      - petId: non
                      - petId: in
                      - petId: sed
                      - petId: consectetur
                      - petId: aliquam
                      - petId: vero
                      - petId: fuga
                      - petId: sed
                personPet2:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    personPets:
                      - petId: quasi
                      - petId: non
                      - petId: optio
                      - petId: quibusdam
                      - petId: reiciendis
                      - petId: non
                      - petId: illum
                      - petId: aut
                      - petId: occaecati
                      - petId: ducimus
                      - petId: quam
                      - petId: doloribus
                      - petId: praesentium
                      - petId: laboriosam
                      - petId: odio
                      - petId: suscipit
                      - petId: magni
                      - petId: molestias
                      - petId: ducimus
                      - petId: explicabo
                personPet3:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    personPets:
                      - petId: pariatur
                      - petId: perspiciatis
                      - petId: officiis
                      - petId: velit
                      - petId: aut
                      - petId: ratione
                      - petId: ea
                      - petId: asperiores
                      - petId: eligendi
                      - petId: repellendus
                      - petId: repudiandae
                      - petId: est
                      - petId: voluptatem
                      - petId: nostrum
                      - petId: consequatur
                      - petId: ut
                      - petId: incidunt
                      - petId: fugiat
                      - petId: eveniet
                      - petId: laborum
                personPet4:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    personPets:
                      - petId: omnis
                      - petId: asperiores
                      - petId: quo
                      - petId: vitae
                      - petId: quo
                      - petId: et
                      - petId: in
                      - petId: ab
                      - petId: quo
                      - petId: accusamus
                      - petId: officia
                      - petId: qui
                      - petId: eligendi
                      - petId: id
                      - petId: sunt
                      - petId: nam
                      - petId: debitis
                      - petId: debitis
                      - petId: molestiae
                      - petId: voluptas
                personPet5:
                  value:
                    pagination:
                      firstPage: '1'
                      lastPage: '10'
                      nextPage: '2'
                      prevPage: '1'
                    personPets:
                      - petId: velit
                      - petId: necessitatibus
                      - petId: eius
                      - petId: nemo
                      - petId: est
                      - petId: magni
                      - petId: architecto
                      - petId: labore
                      - petId: in
                      - petId: velit
                      - petId: facere
                      - petId: expedita
                      - petId: quod
                      - petId: ea
                      - petId: et
                      - petId: beatae
                      - petId: quos
                      - petId: est
                      - petId: non
                      - petId: qui
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createPersonPet
      tags:
        - People
      summary: Create person pet
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPetRequest'
            examples:
              personPet1:
                value:
                  petId: voluptatem
              personPet2:
                value:
                  petId: pariatur
              personPet3:
                value:
                  petId: et
              personPet4:
                value:
                  petId: eos
              personPet5:
                value:
                  petId: impedit
      responses:
        '201':
          description: Create succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  personPet:
                    $ref: '#/components/schemas/PersonPetResponse'
              examples:
                personPet1:
                  value:
                    personPet:
                      petId: et
                personPet2:
                  value:
                    personPet:
                      petId: corporis
                personPet3:
                  value:
                    personPet:
                      petId: occaecati
                personPet4:
                  value:
                    personPet:
                      petId: ipsam
                personPet5:
                  value:
                    personPet:
                      petId: animi
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/people/{personId}/pets/{petId}':
    head:
      operationId: checkPersonPet
      tags:
        - People
      summary: Check person pet
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      responses:
        '200':
          description: Check succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      operationId: getPersonPet
      tags:
        - People
      summary: Get person pet
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      responses:
        '200':
          description: Get succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  personPet:
                    $ref: '#/components/schemas/PersonPetResponse'
              examples:
                personPet1:
                  value:
                    personPet:
                      petId: velit
                personPet2:
                  value:
                    personPet:
                      petId: rem
                personPet3:
                  value:
                    personPet:
                      petId: sint
                personPet4:
                  value:
                    personPet:
                      petId: consequatur
                personPet5:
                  value:
                    personPet:
                      petId: vitae
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: replacePersonPet
      tags:
        - People
      summary: Replace person pet
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPetRequest'
            examples:
              personPet1:
                value:
                  petId: et
              personPet2:
                value:
                  petId: voluptate
              personPet3:
                value:
                  petId: incidunt
              personPet4:
                value:
                  petId: ad
              personPet5:
                value:
                  petId: quas
      responses:
        '200':
          description: Replace succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  personPet:
                    $ref: '#/components/schemas/PersonPetResponse'
              examples:
                personPet1:
                  value:
                    personPet:
                      petId: quibusdam
                personPet2:
                  value:
                    personPet:
                      petId: nihil
                personPet3:
                  value:
                    personPet:
                      petId: minima
                personPet4:
                  value:
                    personPet:
                      petId: quae
                personPet5:
                  value:
                    personPet:
                      petId: et
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updatePersonPet
      tags:
        - People
      summary: Update person pet
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPetRequest'
            examples:
              personPet1:
                value:
                  petId: optio
              personPet2:
                value:
                  petId: earum
              personPet3:
                value:
                  petId: est
              personPet4:
                value:
                  petId: laboriosam
              personPet5:
                value:
                  petId: dignissimos
      responses:
        '200':
          description: Update succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  personPet:
                    $ref: '#/components/schemas/PersonPetResponse'
              examples:
                personPet1:
                  value:
                    personPet:
                      petId: in
                personPet2:
                  value:
                    personPet:
                      petId: sed
                personPet3:
                  value:
                    personPet:
                      petId: qui
                personPet4:
                  value:
                    personPet:
                      petId: atque
                personPet5:
                  value:
                    personPet:
                      petId: vero
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deletePersonPet
      tags:
        - People
      summary: Delete person pet
      parameters:
        - in: path
          required: true
          name: personId
          schema:
            type: string
          description: Person id
        - in: path
          required: true
          name: petId
          schema:
            type: string
          description: Pet id
      responses:
        '204':
          description: Delete succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    EmptyResponse:
      type: object
    ErrorResponse:
      type: object
      properties:
        code:
          type: number
          readOnly: true
        message:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        details:
          type: array
          items:
            type: string
          readOnly: true
      required:
        - statusCode
        - message
    PaginationResponse:
      type: object
      properties:
        firstPage:
          type: integer
          format: int32
        lastPage:
          type: integer
          format: int32
        nextPage:
          type: integer
          format: int32
        prevPage:
          type: integer
          format: int32
      required:
        - firstPage
        - lastPage
        - nextPage
        - prevPage
    PetResponse:
      properties:
        name:
          type: string
    PetRequest:
      properties:
        name:
          type: string
    PersonResponse:
      properties:
        name:
          type: string
    PersonRequest:
      properties:
        name:
          type: string
    PersonPetResponse:
      properties:
        petId:
          type: string
    PersonPetRequest:
      properties:
        petId:
          type: string
